version: "3.9"
services:
  catalogMongodb:
    image: mongo
    container_name: mongodb
    restart: always
    ports:
      - "27017:27017"
    # healthcheck:
    #   test: echo 'db.runCommand("ping").ok' | mongo localhost:27017/test --quiet
    #   interval: 10s
    #   timeout: 10s
    #   retries: 5
      #start_period: 40s

  mssqlserver:
    image: mcr.microsoft.com/mssql/server
    container_name: sqlserver
    environment:
      SA_PASSWORD: "AAAaaa111"
      ACCEPT_EULA: "Y"
    ports:
      - "1433:1433"

    # healthcheck:
    #   test: ["CMD-SHELL", "curl", "http://localhost:80"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 5

  basketRedis:
    image: redis:alpine
    container_name: basketdb
    restart: always
    ports: 
      - "6379:6379"
    #  321321332
  rabbitserver:
    image: "rabbitmq:3-management"
    container_name: rabbitmqserver
    ports: 
      - "5672:5672"
      - "15672:15672"
    
  webapp:
    container_name: webapp
    build:
      context: .
      dockerfile: src/WebApp/AspnetRunBasics/Dockerfile
    ports: 
      - "8003:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - "ApiSettings:BaseAddress=apigateway"
    depends_on: 
      - apigateway
  apigateway:
    container_name: apigateway
    build: 
      context: .
      dockerfile: src/ApiGateway/APIGateway/Dockerfile
    ports: 
    - "7000:80"
    environment: 
      - ASPNETCORE_ENVIRONMENT=Development

  basketapi:
    container_name: basket
    build: 
      context: .
      dockerfile: src/Basket/Basket.API/Dockerfile
    ports: 
    - "8001:80"
    environment: 
      - "ConnectionStrings:Redis=basketRedis:6379"
      - "EventBus:HostName=rabbitserver"  # TODO: ovde bi trebalo da stoji rabbitmq, ali webapp microservice moze da radi i sa localhost
      - "EventBus:UserName=guest"
      - "EventBus:Password=guest"
    
  catalogapi:
    container_name: catalog
    build: 
      context: .
      dockerfile: src/Catalog/Catalog.API/Dockerfile
    ports: 
      - "8000:80"
    environment:
      - "CatalogDatabaseSettings:ConnectionString=mongodb://catalogMongodb:27017"
      - "CatalogDatabaseSettings:DatabaseName=CatalogDb"
      - "CatalogDatabaseSettings:CollectionName=Products"
    # depends_on: 
    #   - catalogMongodb
    #     # condition: service_healthy
    # links: 
    #   - catalogMongodb

  orderingapi:
    container_name: ordering
    restart: on-failure
    # restart: on-failure # TODO: ovo ne pomaze kada baza je baza nedostupna pri pokretanju
    # Mozda da se napravi healthcheck za MSSQL, ali nije kriticno pa moze i restart on-failure
    build:
      context: .
      dockerfile: src/Ordering/Ordering.API/Dockerfile
    ports:
      - "8002:80"
    depends_on:
      - rabbitserver
      - mssqlserver
    environment:
      - "ConnectionStrings:OrderConnection=Server=mssqlserver;Database=OrderDb;User Id=sa;Password=AAAaaa111"
      - "EventBus:HostName=rabbitserver"  # TODO: ovde bi trebalo da stoji rabbitmq, ali webapp microservice moze da radi i sa localhost
      - "EventBus:UserName=guest"
      - "EventBus:Password=guest"
      - ASPNETCORE_ENVIRONMENT=Development